<?php

use Drupal\writemap_import\Controller\WritemapImportCreateNodeController;
use Drupal\taxonomy\Entity\Term;
use Drupal\system\Entity\Menu;
use Drupal\menu_link_content\Entity\MenuLinkContent;


/**
 * Adding a library (css+js) to all pages
 *
 * @param array $page An array to which you can add attachments.
 */
function writemap_import_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'writemap_import/james';
}

/**
 *  Implements hook_ENTITY_TYPE_insert().
 *  When nodes are being created via the Writemap CSV export, we want to
 *  1) Assign a section
 *  2) Assign a menu item in the proper hierarchy.
 *
 * @param \Drupal\node\NodeInterface $node A node object that is being created.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function writemap_import_node_insert(Drupal\node\NodeInterface $node) {


  // Get the menu placeholder which comes from writemaps.com
  // in the form of page_001_001_001
  //$fi = $node->get('feeds_item')->getValue();


  $mp = $node->get('field_menu_placeholder')->getString();

  // If the node being created doesn't have a menu placeholder, don't run this code. 
  if (strlen($mp) == 0) {
  }
  else {

    // Get the 'feeds_item' field value
    $fi_value = $node->get('feeds_item')->getValue();
    $feed_item_id = [$fi_value[0]['target_id']];
    $feed = \Drupal::entityTypeManager()
      ->getStorage('feeds_feed')
      ->load($feed_item_id[0]);

    $section = $feed->get('title')->getString();

    // Try to load the proper term
    $new_term_vid = 'section';
    $query = \Drupal::entityQuery('taxonomy_term')
      ->condition('vid', $new_term_vid)
      ->condition('name', $section);
    $tids = $query->execute();
    $term = Term::loadMultiple($tids);


    // If the term doesn't exist, create it then use it.  
    // If it does exist, just use it.
    if (empty($term)) {
      $new_term = Term::create(['vid' => $new_term_vid, 'name' => $section]);
      $new_term->save();
      $node->set('field_section', $new_term->id());
    }
    else {
      $existing_term_id = reset($term);

      $node->set('field_section', $existing_term_id);
    }


    ////////////////////////////////////////////////////////////
    // Does the menu need to be created?
    // Similar to the section above, we need to determine whether
    // or not the menu already exists. The menu should be named
    // the same as the section.
    ////////////////////////////////////////////////////////////

    // If the menu exists, just use it.
    $menu = Menu::load($section);
    // If the menu doesn't exist, create it then use it.
    if (empty($menu)) {


      Menu::create([
        'id' => $section,
        'label' => $section,
        'description' => 'Description for: ' . $section . ' menu',
      ])->save();
    }

    /////////////////////////////////////////////////////////////
    // Add Paragraphs to the node
    ////////////////////////////////////////////////////////////

    // Generate the paragraphs over in the Controller
    $node_paragraphs = WritemapImportCreateNodeController::getDummyPageContent($node);

    // Attach the paragraphs to the node
    $node->set('field_page_component', $node_paragraphs);

    // Save the node now that we've added some paragraphs.
    $node->save();


    ////////////////////////////////////////////////////////////
    // Make menus nested.  Have fun, yo.
    // Ok, here's the logic that *should* work:
    // 1) Get the existing menu hierarchy ($mh)
    // 2) Get the current menu item placeholder
    // 2.1) Get the number of segments in the current menu item placeholder
    // 3) Get the number of segments in the previous menu item of the menu hierarchy
    // 4) IF: the previous menu item has fewer segments than the current menu item placeholder,
    //    then the previous menu item is the parent of the current parent.
    //    ELSE: travel to the next menu item placeholder in the hierarchy and check again.
    //    Keep doing this until a parent is set.   
    ////////////////////////////////////////////////////////////

    // Load an existing menu placeholder
    $tempstore = \Drupal::service('user.private_tempstore')
      ->get('writemap_import');

    // $holder stores the hierarchy. At this point it does NOT contain the current node.

    $holder = $tempstore->get($section);
    // $mip = Menu Item Placeholder. This is the 'hierarchy string' included with the node on import.
    $mip = $node->get('field_menu_placeholder')->getString();

    // Add the current node to the hierarchy list
    $holder[$mip] = $node->id();

    // Update the temporary storage with the updated data
    $tempstore->set($section, $holder);

    // $mh = Menu Hierarchy. The temporary menu hierarchy storage, including the
    // current node.
    $mh = $tempstore->get($section);
    // We want to reverse the array so we can travel through it with a normal foreach()
    // @see fatty notes above about the logic.

    // $tmphi = TeMPorary HIerarchy
    $tmphi = array_reverse($mh, TRUE);

    // Sending NULL 'parent'  to the menu link creating method works fine.
    $parent = NULL;

    // Menu Item Placeholder Segments tells us how deep in the hierarchy a menu item is.
    // We are trying to figure out what the parent menu item is and then set that menu item
    // as the parent of this menu item.

    // $mip_segments is the 'depth' of the current menu item in the hierarchy
    $mip_segments = substr_count($mip, '_');

    foreach ($tmphi as $placeholder => $nid) {
      // $segments is the count of the 'depth' in the hierarchy
      $segments = substr_count($placeholder, '_');

      if ($segments < $mip_segments) {

        $parent_nid = $mh[$placeholder];
        $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
        $results = $menu_link_manager->loadLinksByRoute('entity.node.canonical', ['node' => $parent_nid]);

        foreach ($results as $result) {
          $link_id = $result->getPluginId();
          $link_menu = $result->getmenuName();
          if ($link_menu == $section) {
            $parent = $link_id;
          }
        } // /foreach over the loadLinksByRoute()

        break;
      }
    }


    //Create a menu link
    // @see https://drupal.stackexchange.com/a/257797
    MenuLinkContent::create([
      'title' => $node->getTitle(),
      'link' => 'internal:/node/' . $node->id(),
      'menu_name' => $section,
      'parent' => $parent,
      'expanded' => TRUE,
    ])->save();
  }// end of 'was this node created by the import script?'
}

/**
 * Implements hook_form_alter()
 * When a user submits the "Are you sure you want to import the feed FEED
 * NAME?"
 * (feed/%/import) we want to delete the menu and section associted with this
 * feed.
 *
 * For some reason, when using the "Save and import" button on the feed/%/edit
 * form some of the resultant menu items aren't properly placed in the
 * hierarchy.  I don't know why, so I'm going to disable the "Save and import"
 * button, and leave the "Save" button.
 */
function writemap_import_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch ($form_id) {

    case 'feeds_feed_import_writemap_form':
      // Remove the 'Save and import' button.
      unset($form['actions']['import']);
      break;

    case 'feeds_feed_import_writemap_import_form':

      $path = \Drupal::request()->getpathInfo();
      $arg = explode('/', $path);

      $feed = \Drupal::entityTypeManager()
        ->getStorage('feeds_feed')
        ->load($arg[2]);
      $section = $feed->get('title')->getString();


      $tempstore = \Drupal::service('user.private_tempstore')
        ->get('writemap_import');
      $tempstore->set($section, []);
      break;

    case 'feeds_feed_import_writemap_clear_form':
      // Add the section variable so it gets passed to our custom submit handler.
      $path = \Drupal::request()->getpathInfo();
      $arg = explode('/', $path);

      $feed = \Drupal::entityTypeManager()
        ->getStorage('feeds_feed')
        ->load($arg[2]);
      $section = $feed->get('title')->getString();

      //$section_machine = _machine_friendly($section);

      // Add a hidden field
      // @see https://www.drupal.org/forum/support/module-development-and-code-questions/2015-12-19/drupal-8-submit-handler#comment-11902407
      $form['section'] = [
        '#type' => 'hidden',
        '#attributes' => [
          'id' => 'section',
        ],
        '#default_value' => $section,
      ];
      // Add the submit handler so we delete our menus and terms.
      $form['actions']['submit']['#submit'][] = 'writemap_import_delete_infrastructure';
      break;
  }
}

/**
 * Extra submit handler for feeds_feed_import_writemap_clear_form
 * Deletes the menu and term when the imported nodes are deleted.
 */
function writemap_import_delete_infrastructure(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $section = $form_state->getValue('section');


  //$section_machine = _machine_friendly($section);


  $menu = Menu::load($section);
  if (!is_null($menu)) {
    $menu->delete();
  }

  // I'm assuming that I'm wrong about this being the simplest way to load 
  // a taxonomy term...but who knows.
  // Drupal 8 is so freaking difficult.  Ugh.  Well, at least my kids will 
  // keep eating steak once a week 8^)
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(
      [
        'name' => $section,
        'vid' => 'sections',
      ]);
  foreach ($terms as $term) {
    $term->delete();
  }
}


/**
 *  Implements hook_theme.
 *  So far, this just tells Drupal to use the template defined in our module.
 *  Variables are sent to this template via template_theme()
 *
 * @see writemap_import_preprocess_block()
 */
function writemap_import_theme($existing, $type, $theme, $path) {
  $return = [];
  $return['block__section_menu'] = [
    'template' => 'block--section-menu',
    'base hook' => 'block',
  ];
  return $return;
}

/**
 *  Implements hook_preprocess_block().
 *  So far this is how we send variables to our template.
 *
 * @see writemap_import_theme()
 */
function writemap_import_preprocess_block(&$variables) {
  $config = $variables['elements']['#configuration'];
  if ($config['id'] == 'section_menu' && $config['provider'] == 'writemap_import') {
    // Get the actual menu name
    $menu_id = $variables['elements']['content']['#menu_name'];
    $menu = Menu::load($menu_id);
    $menu_name = $menu->label();
    $variables['section'] = $menu_name;
  }
}

/**
 * Convert a string into a machine-name-friendly version.
 */
function _machine_friendly($string) {
  $patterns[0] = '/[\s]/i';
  $replacements[0] = "-";
  $section = $string;

  $section_machine = preg_replace($patterns, $replacements, $section);
  $section_machine = strtolower($section_machine);

  return $section_machine;
}
